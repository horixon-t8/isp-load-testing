export class ReportGenerator {
  static generateHTMLReport(data) {
    const timestamp = new Date().toISOString();
    const duration = (data.state.testRunDurationMs / 1000).toFixed(2);
    const totalRequests = data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0;
    const failedRequests = data.metrics.http_req_failed
      ? (data.metrics.http_req_failed.values.rate * 100).toFixed(2)
      : 0;
    const avgResponseTime = data.metrics.http_req_duration
      ? data.metrics.http_req_duration.values.avg.toFixed(2)
      : 0;
    const p95ResponseTime = data.metrics.http_req_duration
      ? data.metrics.http_req_duration.values['p(95)'].toFixed(2)
      : 0;

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K6 Load Test Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { text-align: center; color: #333; border-bottom: 2px solid #007acc; padding-bottom: 20px; margin-bottom: 30px; }
        .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric-card { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #007acc; }
        .metric-value { font-size: 24px; font-weight: bold; color: #007acc; }
        .metric-label { font-size: 14px; color: #666; margin-top: 5px; }
        .threshold-status { padding: 10px; margin: 10px 0; border-radius: 4px; }
        .threshold-pass { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .threshold-fail { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .custom-metrics { margin-top: 30px; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 K6 Load Test Report</h1>
            <p>Generated on: ${timestamp}</p>
        </div>

        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">${duration}s</div>
                <div class="metric-label">Test Duration</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${data.metrics.vus_max ? data.metrics.vus_max.values.max : 0}</div>
                <div class="metric-label">Max Virtual Users</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${totalRequests}</div>
                <div class="metric-label">Total Requests</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${failedRequests}%</div>
                <div class="metric-label">Failed Requests</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${avgResponseTime}ms</div>
                <div class="metric-label">Avg Response Time</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${p95ResponseTime}ms</div>
                <div class="metric-label">95th Percentile</div>
            </div>
        </div>

        <div class="custom-metrics">
            <h3>📊 Custom Metrics</h3>
            ${this.generateCustomMetricsHTML(data.metrics)}
        </div>

        <div class="footer">
            <p>Report generated by K6 Test Suite</p>
        </div>
    </div>
</body>
</html>`;
  }

  static generateCustomMetricsHTML(metrics) {
    let html = '';
    const customMetrics = [
      'auth_me_errors',
      'auth_features_errors',
      'master_categories_errors',
      'list_quotations_errors',
      'create_quotation_errors',
      'homepage_flow_errors',
      'quotation_flow_errors'
    ];

    customMetrics.forEach(metricName => {
      if (metrics[metricName]) {
        const rate = (metrics[metricName].values.rate * 100).toFixed(2);
        const statusClass = rate < 5 ? 'threshold-pass' : 'threshold-fail';
        html += `<div class="threshold-status ${statusClass}">
                   <strong>${metricName.replace(/_/g, ' ').toUpperCase()}:</strong> ${rate}%
                 </div>`;
      }
    });

    return html || '<p>No custom metrics available</p>';
  }

  static generateCSVReport(data) {
    const rows = [];
    rows.push(['Metric', 'Value', 'Unit']);

    rows.push(['Test Duration', (data.state.testRunDurationMs / 1000).toFixed(2), 'seconds']);
    rows.push(['Max VUs', data.metrics.vus_max ? data.metrics.vus_max.values.max : 0, 'users']);
    rows.push([
      'Total Requests',
      data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0,
      'count'
    ]);
    rows.push([
      'Failed Requests',
      data.metrics.http_req_failed
        ? (data.metrics.http_req_failed.values.rate * 100).toFixed(2)
        : 0,
      'percent'
    ]);
    rows.push([
      'Avg Response Time',
      data.metrics.http_req_duration ? data.metrics.http_req_duration.values.avg.toFixed(2) : 0,
      'ms'
    ]);
    rows.push([
      '95th Percentile',
      data.metrics.http_req_duration
        ? data.metrics.http_req_duration.values['p(95)'].toFixed(2)
        : 0,
      'ms'
    ]);

    Object.keys(data.metrics).forEach(metricName => {
      if (metricName.includes('_errors') || metricName.includes('_response_time')) {
        const metric = data.metrics[metricName];
        if (metric.values.rate !== undefined) {
          rows.push([metricName, (metric.values.rate * 100).toFixed(2), 'percent']);
        } else if (metric.values.avg !== undefined) {
          rows.push([metricName, metric.values.avg.toFixed(2), 'ms']);
        }
      }
    });

    return rows.map(row => row.join(',')).join('\n');
  }

  static generateSummaryReport(data) {
    const timestamp = new Date().toISOString();
    const duration = (data.state.testRunDurationMs / 1000).toFixed(2);

    let summary = '\n📊 K6 LOAD TEST SUMMARY\n';
    summary += `${'='.repeat(50)}\n`;
    summary += `🕐 Generated: ${timestamp}\n`;
    summary += `⏱️  Duration: ${duration}s\n`;
    summary += `👥 Max VUs: ${data.metrics.vus_max ? data.metrics.vus_max.values.max : 0}\n\n`;

    summary += '📈 HTTP METRICS\n';
    summary += `${'-'.repeat(30)}\n`;
    summary += `Total Requests: ${data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0}\n`;
    summary += `Failed Requests: ${data.metrics.http_req_failed ? (data.metrics.http_req_failed.values.rate * 100).toFixed(2) : 0}%\n`;
    summary += `Avg Response Time: ${data.metrics.http_req_duration ? data.metrics.http_req_duration.values.avg.toFixed(2) : 0}ms\n`;
    summary += `95th Percentile: ${data.metrics.http_req_duration ? data.metrics.http_req_duration.values['p(95)'].toFixed(2) : 0}ms\n\n`;

    const customMetrics = Object.keys(data.metrics).filter(
      key => key.includes('_errors') || key.includes('_response_time') || key.includes('_requests')
    );

    if (customMetrics.length > 0) {
      summary += '🎯 CUSTOM METRICS\n';
      summary += `${'-'.repeat(30)}\n`;

      customMetrics.forEach(metricName => {
        const metric = data.metrics[metricName];
        if (metric.values.rate !== undefined) {
          summary += `${metricName}: ${(metric.values.rate * 100).toFixed(2)}%\n`;
        } else if (metric.values.avg !== undefined) {
          summary += `${metricName}: ${metric.values.avg.toFixed(2)}ms\n`;
        } else if (metric.values.count !== undefined) {
          summary += `${metricName}: ${metric.values.count}\n`;
        }
      });
    }

    summary += `\n${'='.repeat(50)}\n`;
    return summary;
  }
}
